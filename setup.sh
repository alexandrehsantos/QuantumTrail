#!/bin/bash

# üöÄ QUANTUM TRAIL - SETUP AUTOM√ÅTICO
# Script de instala√ß√£o e configura√ß√£o autom√°tica

echo "üöÄ QUANTUM TRAIL - SETUP AUTOM√ÅTICO"
echo "===================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar Python
log_info "Verificando Python..."
if command -v python3 &> /dev/null; then
    PYTHON_VERSION=$(python3 --version | cut -d' ' -f2)
    log_success "Python $PYTHON_VERSION encontrado"
else
    log_error "Python 3 n√£o encontrado. Instale Python 3.8+ primeiro."
    exit 1
fi

# Verificar pip
log_info "Verificando pip..."
if command -v pip3 &> /dev/null; then
    log_success "pip3 encontrado"
else
    log_error "pip3 n√£o encontrado. Instale pip primeiro."
    exit 1
fi

# Instalar depend√™ncias Python
log_info "Instalando depend√™ncias Python..."
if pip3 install -r requirements.txt; then
    log_success "Depend√™ncias Python instaladas"
else
    log_error "Erro ao instalar depend√™ncias Python"
    exit 1
fi

# Detectar sistema operacional e instalar TA-Lib
log_info "Detectando sistema operacional..."
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    log_info "Sistema Linux detectado"
    
    # Verificar se √© Ubuntu/Debian
    if command -v apt-get &> /dev/null; then
        log_info "Instalando TA-Lib no Ubuntu/Debian..."
        sudo apt-get update
        sudo apt-get install -y libta-lib-dev
        pip3 install TA-Lib
        log_success "TA-Lib instalado no Ubuntu/Debian"
    
    # Verificar se √© CentOS/RHEL
    elif command -v yum &> /dev/null; then
        log_info "Instalando TA-Lib no CentOS/RHEL..."
        sudo yum install -y ta-lib-devel
        pip3 install TA-Lib
        log_success "TA-Lib instalado no CentOS/RHEL"
    
    else
        log_warning "Distribui√ß√£o Linux n√£o reconhecida. Instale TA-Lib manualmente."
    fi

elif [[ "$OSTYPE" == "darwin"* ]]; then
    log_info "Sistema macOS detectado"
    
    if command -v brew &> /dev/null; then
        log_info "Instalando TA-Lib no macOS..."
        brew install ta-lib
        pip3 install TA-Lib
        log_success "TA-Lib instalado no macOS"
    else
        log_error "Homebrew n√£o encontrado. Instale Homebrew primeiro."
        exit 1
    fi

else
    log_warning "Sistema operacional n√£o reconhecido. Instale TA-Lib manualmente."
fi

# Verificar se TA-Lib foi instalado corretamente
log_info "Verificando instala√ß√£o do TA-Lib..."
if python3 -c "import talib" 2>/dev/null; then
    log_success "TA-Lib instalado e funcionando"
else
    log_error "TA-Lib n√£o foi instalado corretamente"
    log_info "Tente instalar manualmente:"
    log_info "Ubuntu/Debian: sudo apt-get install libta-lib-dev && pip3 install TA-Lib"
    log_info "macOS: brew install ta-lib && pip3 install TA-Lib"
fi

# Verificar modelo ML
log_info "Verificando modelo ML..."
if [ -f "gpu_perfect_model.pkl" ]; then
    MODEL_SIZE=$(du -h gpu_perfect_model.pkl | cut -f1)
    log_success "Modelo ML encontrado ($MODEL_SIZE)"
else
    log_error "Modelo ML n√£o encontrado (gpu_perfect_model.pkl)"
    exit 1
fi

# Criar configura√ß√£o inicial
log_info "Criando configura√ß√£o inicial..."
if [ ! -f "quantum_config.json" ]; then
    cp config_exemplo.json quantum_config.json
    log_success "Configura√ß√£o inicial criada"
else
    log_info "Configura√ß√£o j√° existe"
fi

# Teste r√°pido do sistema
log_info "Executando teste r√°pido do sistema..."
if python3 -c "
from quantum_trading_optimized import QuantumTradingSystem
import sys
try:
    quantum = QuantumTradingSystem()
    signal = quantum.get_trading_signal('BTCUSDT')
    if signal['signal'] in ['BUY', 'HOLD', 'ERROR']:
        print('‚úÖ Sistema funcionando')
        sys.exit(0)
    else:
        print('‚ùå Erro no sistema')
        sys.exit(1)
except Exception as e:
    print(f'‚ùå Erro: {e}')
    sys.exit(1)
" 2>/dev/null; then
    log_success "Teste do sistema passou"
else
    log_error "Teste do sistema falhou"
fi

# Criar diret√≥rios necess√°rios
log_info "Criando diret√≥rios necess√°rios..."
mkdir -p logs
mkdir -p backups
mkdir -p reports
log_success "Diret√≥rios criados"

# Configurar permiss√µes
log_info "Configurando permiss√µes..."
chmod +x *.py
chmod +x setup.sh
log_success "Permiss√µes configuradas"

# Resumo final
echo ""
echo "üéâ SETUP CONCLU√çDO COM SUCESSO!"
echo "================================"
echo ""
log_success "Sistema QuantumTrail instalado e configurado"
echo ""
echo "üìã PR√ìXIMOS PASSOS:"
echo "1. Execute: python3 quantum_control_center.py"
echo "2. Configure seus par√¢metros de trading"
echo "3. Inicie o sistema de trading"
echo ""
echo "üìñ DOCUMENTA√á√ÉO:"
echo "- README.md - Documenta√ß√£o completa"
echo "- GUIA_RAPIDO.md - Guia de in√≠cio r√°pido"
echo "- config_exemplo.json - Exemplos de configura√ß√£o"
echo ""
echo "üîß COMANDOS PRINCIPAIS:"
echo "- python3 quantum_control_center.py  # Centro de controle"
echo "- python3 quantum_monitor.py         # Monitor em tempo real"
echo "- python3 quantum_trading_optimized.py # Trading autom√°tico"
echo ""
log_success "Bem-vindo ao QuantumTrail! üöÄ" 